{"version":3,"file":"CryptoTicker.js","sourceRoot":"","sources":["../src/CryptoTicker.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AACnD,OAAO,aAAa,MAAM,WAAW,CAAC;AACtC,OAAO,EAAsB,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AAErE,MAAM,OAAO,YAAa,SAAQ,UAAU;IAA5C;;QAIE,aAAQ,GAAa,QAAQ,CAAC,OAAO,CAAC;QA2B9B,YAAO,GAAG,CAAC,IAAkB,EAAE,EAAE;YACvC,MAAM,GAAG,GAAG,IAAI,WAAW,CAAC,QAAQ,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;YACxD,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QAC1B,CAAC,CAAC;IACJ,CAAC;IA7BC,iBAAiB;QACf,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1B,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE;YAC9B,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SACjE;IACH,CAAC;IAED,oBAAoB;QAClB,KAAK,CAAC,oBAAoB,EAAE,CAAC;QAC7B,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE;YAC9B,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SACnE;IACH,CAAC;IAED,MAAM,CAAC,IAAsB;QAC3B,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;YAC5C,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC;YAC3C,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC;YACvD,aAAa,CAAC,WAAW,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YACxD,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE;gBAC9B,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;aACjE;SACF;IACH,CAAC;CAMF;AAjCC;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;0CAChC;AAEZ;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;8CACN","sourcesContent":["import { LitElement, property } from \"lit-element\";\nimport TickerService from \"./service\";\nimport { IPriceTicker, Pair, Exchange } from \"./service/types/index\";\n\nexport class CryptoTicker extends LitElement {\n  @property({ type: String, attribute: true })\n  pair?: Pair;\n  @property({ type: String, attribute: true })\n  exchange: Exchange = Exchange.BINANCE;\n\n  connectedCallback() {\n    super.connectedCallback();\n    if (this.pair && this.exchange) {\n      TickerService.subscribe(this.pair, this.exchange, this._onData);\n    }\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this.pair && this.exchange) {\n      TickerService.unsubscribe(this.pair, this.exchange, this._onData);\n    }\n  }\n\n  update(prev: Map<string, any>) {\n    if (prev.has(\"pair\") || prev.has(\"exchange\")) {\n      const pair = prev.get(\"pair\") || this.pair;\n      const exchange = prev.get(\"exchange\") || this.exchange;\n      TickerService.unsubscribe(pair, exchange, this._onData);\n      if (this.pair && this.exchange) {\n        TickerService.subscribe(this.pair, this.exchange, this._onData);\n      }\n    }\n  }\n\n  private _onData = (data: IPriceTicker) => {\n    const evt = new CustomEvent(\"stream\", { detail: data });\n    this.dispatchEvent(evt);\n  };\n}\n"]}