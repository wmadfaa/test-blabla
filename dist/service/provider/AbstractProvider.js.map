{"version":3,"file":"AbstractProvider.js","sourceRoot":"","sources":["../../../src/service/provider/AbstractProvider.ts"],"names":[],"mappings":"AAAA,OAAO,EAAgB,QAAQ,EAAQ,MAAM,UAAU,CAAC;AACxD,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAChD,OAAO,EAAE,oBAAoB,EAAE,MAAM,kBAAkB,CAAC;AAExD,MAAM,QAAQ,GAAG;IACf,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,kCAAkC;CACvD,CAAC;AAEF,MAAM,OAAgB,gBAAgB;IAIpC,YACU,QAAkB,EAClB,SAAkE;QADlE,aAAQ,GAAR,QAAQ,CAAU;QAClB,cAAS,GAAT,SAAS,CAAyD;QAHpE,mBAAc,GAAU,EAAE,CAAC;QAKjC,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,KAAK;QACH,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IACtB,CAAC;IAES,WAAW;QACnB,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,CAAC,CAAC;IACtC,CAAC;IAES,OAAO;QACf,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;YAC7D,IAAI,CAAC,MAAM,GAAG,IAAI,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;SACtD;QACD,IAAI,IAAI,CAAC,WAAW,EAAE;YAAE,OAAO;QAC/B,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,GAAG,EAAE;YACxB,8CAA8C;YAC9C,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC1B,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC5B,CAAC,CAAC;IACJ,CAAC;IAED,kBAAkB;QAChB,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,CAAC,OAAY,EAAE,EAAE;YACvC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACtC,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAEpC,IAAI,CAAC,MAAM;gBAAE,OAAO;YACpB,oBAAoB,CAAC,IAAI,CACvB,YAAY,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,EAC3C,MAAM,CAAC,UAAU,CAClB,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;IAEO,kBAAkB;QACxB,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE;YACjC,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;YACzC,kCAAkC;YAClC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACjB;IACH,CAAC;IAES,IAAI,CAAC,IAAS;QACtB,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,CAAC,EAAE;YAChD,wCAAwC;YACxC,uCAAuC;YACvC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC/B,OAAO,KAAK,CAAC;SACd;QACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QACvC,OAAO,IAAI,CAAC;IACd,CAAC;CACF","sourcesContent":["import { IPriceTicker, Exchange, Pair } from \"../types\";\nimport { getEventName } from \"../utils/mapping\";\nimport { EventEmitterInstance } from \"../event-emitter\";\n\nconst wsUrlMap = {\n  [Exchange.BINANCE]: \"wss://stream.binance.com:9443/ws\",\n};\n\nexport abstract class AbstractProvider {\n  // @ts-ignore\n  private socket: WebSocket;\n  private pendingRequest: any[] = [];\n  constructor(\n    private exchange: Exchange,\n    private parseData: (data: any) => { pair: Pair; tickerData: IPriceTicker }\n  ) {\n    this.connect();\n  }\n\n  close() {\n    this.socket.close();\n  }\n\n  protected isConnected() {\n    return this.socket.readyState === 1;\n  }\n\n  protected connect() {\n    if (!this.socket || this.socket.CLOSING || this.socket.CLOSED) {\n      this.socket = new WebSocket(wsUrlMap[this.exchange]);\n    }\n    if (this.isConnected()) return;\n    this.socket.onopen = () => {\n      //('socket connected', this.socket.readyState)\n      this.listenMessageEvent();\n      this.sendPendingRequest();\n    };\n  }\n\n  listenMessageEvent() {\n    this.socket.onmessage = (message: any) => {\n      const data = JSON.parse(message.data);\n      const parsed = this.parseData(data);\n\n      if (!parsed) return;\n      EventEmitterInstance.emit(\n        getEventName(parsed.pair, Exchange.BINANCE),\n        parsed.tickerData\n      );\n    };\n  }\n\n  private sendPendingRequest() {\n    while (this.pendingRequest.length) {\n      const data = this.pendingRequest.shift();\n      //('sending queued request', data)\n      this.send(data);\n    }\n  }\n\n  protected send(data: any): boolean {\n    if (!this.socket || this.socket.readyState !== 1) {\n      //(Exchange.BINANCE, 'socket not ready')\n      //(Exchange.BINANCE, 'queuing request')\n      this.pendingRequest.push(data);\n      return false;\n    }\n    this.socket.send(JSON.stringify(data));\n    return true;\n  }\n}\n"]}