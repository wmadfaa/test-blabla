{"version":3,"file":"TickerService.js","sourceRoot":"","sources":["../../src/service/TickerService.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,OAAO,EAAE,QAAQ,EAAuC,MAAM,SAAS,CAAC;AACxE,OAAO,EAAE,cAAc,EAAE,MAAM,uBAAuB,CAAC;AACvD,OAAO,EAAE,oBAAoB,EAAE,MAAM,0BAA0B,CAAC;AAChE,OAAO,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAElD,MAAM,UAAU,GAAG;IACjB,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,cAAc;CACnC,CAAC;AAEF,MAAM,OAAO,aAAa;IAA1B;QACU,cAAS,GAA6C,EAAE,CAAC;QAEjE,cAAS,GAAG,CACV,IAAU,EACV,QAAkB,EAClB,KAAmC,EACzB,EAAE;YACZ,IAAI,OAAO,GAAgC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YACpE,IAAI,CAAC,OAAO,EAAE;gBACZ,4BAA4B;gBAC5B,MAAM,kBAAkB,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;gBAChD,IAAI,CAAC,kBAAkB,EAAE;oBACvB,MAAM,IAAI,KAAK,CAAC,mBAAmB,QAAQ,EAAE,CAAC,CAAC;iBAChD;gBACD,OAAO,GAAG,IAAI,kBAAkB,EAAE,CAAC;gBACnC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC;aACpC;YACD,oBAAoB,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAE,KAAK,CAAC,CAAC;YAC7D,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACxB,OAAO,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;QACvD,CAAC,CAAC;QAEF,gBAAW,GAAG,CACZ,IAAU,EACV,QAAkB,EAClB,KAAmC,EAC7B,EAAE;YACR,MAAM,OAAO,GAAgC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YACtE,IAAI,CAAC,OAAO,EAAE;gBACZ,MAAM,IAAI,KAAK,CAAC,4BAA4B,QAAQ,EAAE,CAAC,CAAC;aACzD;YACD,MAAM,SAAS,GAAG,oBAAoB,CAAC,GAAG,CACxC,YAAY,CAAC,IAAI,EAAE,QAAQ,CAAC,EAC5B,KAAK,CACN,CAAC;YACF,IAAI,SAAS,KAAK,SAAS,IAAI,SAAS,GAAG,CAAC,EAAE;gBAC5C,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;gBACzC,IAAI,CAAC,OAAO;oBAAE,OAAO;gBACrB,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBAC1B,OAAO,CAAC,KAAK,EAAE,CAAC;gBAChB,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;aACjC;QACH,CAAC,CAAC;IACJ,CAAC;CAAA","sourcesContent":["/* eslint-disable import/extensions */\nimport { Exchange, ExchangeService, Pair, IPriceTicker } from './types';\nimport { BinanceService } from './provider/binance.js';\nimport { EventEmitterInstance } from './event-emitter/index.js';\nimport { getEventName } from './utils/mapping.js';\n\nconst serviceMap = {\n  [Exchange.BINANCE]: BinanceService,\n};\n\nexport class TickerService {\n  private providers: { [name in Exchange]?: ExchangeService } = {};\n\n  subscribe = (\n    pair: Pair,\n    exchange: Exchange,\n    event: (data: IPriceTicker) => void\n  ): Function => {\n    let service: ExchangeService | undefined = this.providers[exchange];\n    if (!service) {\n      //('init service', exchange)\n      const serviceConstructor = serviceMap[exchange];\n      if (!serviceConstructor) {\n        throw new Error(`unknown service ${exchange}`);\n      }\n      service = new serviceConstructor();\n      this.providers[exchange] = service;\n    }\n    EventEmitterInstance.on(getEventName(pair, exchange), event);\n    service.subscribe(pair);\n    return () => this.unsubscribe(pair, exchange, event);\n  };\n\n  unsubscribe = (\n    pair: Pair,\n    exchange: Exchange,\n    event: (data: IPriceTicker) => void\n  ): void => {\n    const service: ExchangeService | undefined = this.providers[exchange];\n    if (!service) {\n      throw new Error(`service is not available ${exchange}`);\n    }\n    const available = EventEmitterInstance.off(\n      getEventName(pair, exchange),\n      event\n    );\n    if (available !== undefined && available < 1) {\n      const service = this.providers[exchange];\n      if (!service) return;\n      service.unsubscribe(pair);\n      service.close();\n      delete this.providers[exchange];\n    }\n  };\n}\n"]}